// CONCATENATED MODULE: ../_src/main/utils.js
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Utility methods that are used within the plugin code
 */

/**
 * Determine if it's a JSON object
 * @param {string} str The string to check
 * @returns {boolean} The boolean result
 */
var isJSON = function isJSON(str) {
  try {
    return JSON.parse(str) && !!str;
  } catch (e) {
    return false;
  }
};

var __utils = {
  /**
   * Determine if it has JSON structure
   * @param {string} str The string to check
   * @returns {boolean} The boolean result
   */
  hasJSONStructure: function hasJSONStructure(str) {
    if (typeof str !== 'string') return false;

    try {
      var result = JSON.parse(str);
      return _typeof(result) === 'object' ? true : false;
    } catch (err) {
      return false;
    }
  },
  get: {
    /**
     * Get the sidebar's group meta data
     * @param {string} metaKey The meta's slug
     * @returns {object} The meta data
     */
    groupMeta: function groupMeta(metaKey) {
      var getMeta = wp.data.select('core/editor').getEditedPostAttribute('meta');
      var getMetaData = getMeta && typeof getMeta != 'undefined' ? getMeta[metaKey] : {};
      return isJSON(getMetaData) ? JSON.parse(getMetaData) : {};
    },

    /**
     * Get the post type of the current post/page been viewed in the editor
     * @returns {string} Return the post type
     */
    postType: function postType() {
      return wp.data.select('core/editor').getCurrentPostType();
    },

    /**
     * Get the page template used in the current post/page been viewed in the editor
     * @returns {string} Return the page template
     */
    pageTemplate: function pageTemplate() {
      return wp.data.select('core/editor').getEditedPostAttribute('template');
    }
  },
  update: {
    /**
     * Update the sidebar's group meta data
     * @param {string} metaKey The meta's slug
     */
    groupMeta: function groupMeta(metaKey, id, value) {
      var getMeta = wp.data.select('core/editor').getEditedPostAttribute('meta');
      var getMetaData = getMeta && typeof getMeta != 'undefined' ? getMeta[metaKey] : {};
      var data = isJSON(getMetaData) ? JSON.parse(getMetaData) : {};
      data[id] = value;
      wp.data.dispatch('core/editor').editPost({
        meta: _defineProperty({}, metaKey, JSON.stringify(data))
      });
    }
  }
};

;// CONCATENATED MODULE: ../_src/main/controls/option-presets.js
/**
 * 
 * Option presets for the controls
 * 
 * @param {object} props Pass the 'props' variable when creating the controls
 * @returns Object of preset options
 */
var optionPresets = function optionPresets(props) {
  return {
    boolean: {
      label: props.title,
      checked: props.metaValue,
      onChange: function onChange(content) {
        props.setMetaValue(content);
      }
    },
    colour: {
      label: props.title,
      color: props.metaValue,
      onChangeComplete: function onChangeComplete(content) {
        props.setMetaValue(content.rgb);
      }
    },
    date: {
      //label: props.title,
      currentDate: props.metaValue,
      onChange: function onChange(content) {
        props.setMetaValue(content);
      }
    },
    fontSizes: {
      fallbackFontSize: 16,
      value: props.metaValue,
      onChange: function onChange(content) {
        props.setMetaValue(content);
      }
    },
    media: {
      value: props.metaValue,
      onSelect: function onSelect(media) {
        var preview,
            obj = {};
        obj.id = media.id;
        obj.type = media.type;
        obj.mime = media.mime;
        obj.alt = media.alt;
        obj.title = media.title;
        obj.width = media.width ? media.width : '';
        obj.height = media.height ? media.height : '';
        obj.name = media.name ? media.name : '';

        if (media.type == 'image') {
          preview = 'medium' in media.sizes ? media.sizes.medium.url : media.sizes.full.url;
          obj.preview = preview;
          props.setMetaValue(JSON.stringify(obj));
        } else {
          obj.fileLength = media.fileLength ? media.fileLength : '';
          obj.preview = typeof media.thumb != 'undefined' && media.thumb.src ? media.thumb.src : wpSidesPlugin.images + 'icon-file.svg';
          obj.url = media.url ? media.url : '';
          props.setMetaValue(JSON.stringify(obj));
        }
      }
    },
    radio: {
      label: props.title,
      selected: props.metaValue,
      onChange: function onChange(content) {
        props.setMetaValue(content);
      }
    },
    string: {
      label: props.title,
      value: props.metaValue,
      onChange: function onChange(content) {
        props.setMetaValue(content.toString());
      }
    },
    time: {
      //label: props.title,
      currentTime: props.metaValue,
      onChange: function onChange(content) {
        props.setMetaValue(content);
      }
    }
  };
};

/* harmony default export */ var option_presets = (optionPresets);
;// CONCATENATED MODULE: ../_src/main/controls/create.js
function create_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __ = wp.i18n.__;
var el = wp.element.createElement;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;
var _wp$components = wp.components,
    Button = _wp$components.Button,
    PanelRow = _wp$components.PanelRow;

 // --------------------------------------------------------------------------------

/**
 * Helpers
 * 
 * Functions to aid in creating controls
 */
// --------------------------------------------------------------------------------

/**
 * Generate the controls
 * 
 * @param control Control component via WordPress
 * @param options Determine which option preset to use
 * @param extraOptions Add any additional options to the option preset
 */

var createControls = {
  /**
   * For controls that have their own meta fields
   * 
   * Each control is assigned to a single meta key
   */
  single: {
    /**
     * For most control types
     * 
     * @param {*} control The control component from wp.components
     * @param {string} options The preset options
     * @param {object} extraOptions Additional options to use (optional)
     * @returns The rendered control
     */
    general: function general(control, options, extraOptions) {
      return wp.compose.compose([withSelect(function (select, props) {
        return {
          metaValue: select('core/editor').getEditedPostAttribute('meta')[props.metaKey]
        };
      }), withDispatch(function (dispatch, props) {
        return {
          setMetaValue: function setMetaValue(value) {
            dispatch('core/editor').editPost({
              meta: create_defineProperty({}, props.metaKey, value)
            });
          }
        };
      })])(function (props) {
        var controlOptions = option_presets(props)[options]; // Merge the control preset and additonal options

        if (extraOptions !== false) {
          controlOptions = Object.assign(controlOptions, extraOptions);
        } // Render the control


        return el(PanelRow, {
          className: "wpsides-row--" + props.id
        }, el(control, controlOptions));
      });
    },

    /**
     * For media type controls
     * 
     * @param {*} control The control component from wp.components
     * @param {string} options The preset options
     * @param {object} extraOptions Additional options to use (optional)
     * @returns The rendered control
     */
    media: function media(control, options, extraOptions) {
      return wp.compose.compose([withSelect(function (select, props) {
        return {
          metaValue: select('core/editor').getEditedPostAttribute('meta')[props.metaKey]
        };
      }), withDispatch(function (dispatch, props) {
        return {
          setMetaValue: function setMetaValue(value) {
            dispatch('core/editor').editPost({
              meta: create_defineProperty({}, props.metaKey, value)
            });
          }
        };
      })])(function (props) {
        var controlOptions = option_presets(props)[options]; // Merge the control preset and additonal options

        if (extraOptions !== false) {
          controlOptions = Object.assign(controlOptions, extraOptions);
        } // Render a 'Select Media' button


        controlOptions = Object.assign({
          render: function render(_ref) {
            var open = _ref.open;
            return wp.element.createElement(Button, {
              className: "wpsides-sidebar-image__button wpsides-sidebar-image__button--select",
              isPrimary: true,
              onClick: open
            }, __('Select Media'));
          }
        }, controlOptions); // Render the control, an image preview and a remove button

        var imageData = __utils.hasJSONStructure(props.metaValue) ? JSON.parse(props.metaValue) : {},
            mediaID = imageData.id ? imageData.id : '',
            mediaPreview = imageData.preview && imageData.preview != '' ? imageData.preview : false,
            mediaName = imageData.name ? imageData.name : '';
        var imageTagData = mediaPreview ? {
          className: 'wpsides-sidebar-image__preview',
          "data-id": mediaID,
          src: mediaPreview,
          alt: 'Image Preview'
        } : {};
        return el(PanelRow, {
          className: "wpsides-row--" + props.id
        }, el('div', {
          className: 'wpsides-sidebar-media',
          style: {
            textAlign: 'center'
          }
        }, el(control, controlOptions), el('figure', {
          className: 'wpsides-sidebar-media__preview',
          style: !mediaPreview ? {
            display: 'none'
          } : {}
        }, el('img', imageTagData), el('figcaption', {
          className: 'wpsides-sidebar-media__name'
        }, mediaName)), el('button', {
          style: !mediaPreview ? {
            display: 'none'
          } : {},
          className: 'button button-large editor-button wpsides-sidebar-media__button wpsides-sidebar-media__button--remove',
          onClick: function onClick() {
            props.setMetaValue(JSON.stringify({}));
          }
        }, 'Remove')));
      });
    }
  },

  /**
   * For a group of controls to be saved into a single metakey.
   * 
   * The data is being stored in an object and saved as a string in the meta key.
   */
  group: {
    /**
     * For most control types
     * 
     * @param {*} control The control component from wp.components
     * @param {string} options The preset options
     * @param {object} extraOptions Additional options to use (optional)
     * @returns The rendered control
     */
    general: function general(control, options, extraOptions) {
      return wp.compose.compose([withSelect(function (select, props) {
        var meta = __utils.get.groupMeta(props.metaKey);

        return {
          metaValue: meta[props.id]
        };
      }), withDispatch(function (dispatch, props) {
        return {
          setMetaValue: function setMetaValue(value) {
            var meta = __utils.get.groupMeta(props.metaKey);

            meta[props.id] = value;
            dispatch('core/editor').editPost({
              meta: create_defineProperty({}, props.metaKey, JSON.stringify(meta))
            });
          }
        };
      })])(function (props) {
        var controlOptions = option_presets(props)[options]; // Merge the control preset and additonal options

        if (extraOptions !== false) {
          controlOptions = Object.assign(controlOptions, extraOptions);
        } // Render the control


        return el(PanelRow, {
          className: "wpsides-row--" + props.id
        }, el(control, controlOptions));
      });
    },

    /**
     * For media type types
     * 
     * @param {*} control The control component from wp.components
     * @param {string} options The preset options
     * @param {object} extraOptions Additional options to use (optional)
     * @returns The rendered control
     */
    media: function media(control, options, extraOptions) {
      return wp.compose.compose([withSelect(function (select, props) {
        var meta = __utils.get.groupMeta(props.metaKey);

        return {
          metaValue: meta[props.id]
        };
      }), withDispatch(function (dispatch, props) {
        return {
          setMetaValue: function setMetaValue(value) {
            var meta = __utils.get.groupMeta(props.metaKey);

            if (value != null) {
              meta[props.id] = value;
            } else {
              delete meta[props.id];
            }

            dispatch('core/editor').editPost({
              meta: create_defineProperty({}, props.metaKey, JSON.stringify(meta))
            });
          }
        };
      })])(function (props) {
        var controlOptions = option_presets(props)[options]; // Merge the control preset and additonal options

        if (extraOptions !== false) {
          controlOptions = Object.assign(controlOptions, extraOptions);
        } // Render a 'Select Media' button


        controlOptions = Object.assign({
          render: function render(_ref2) {
            var open = _ref2.open;
            return wp.element.createElement(Button, {
              className: "wpsides-sidebar-image__button wpsides-sidebar-image__button--select",
              isPrimary: true,
              onClick: open
            }, __('Select Media'));
          }
        }, controlOptions); // Render the control, an image preview and a remove button

        var imageData = __utils.hasJSONStructure(props.metaValue) ? JSON.parse(props.metaValue) : {},
            mediaID = imageData.id ? imageData.id : '',
            mediaPreview = imageData.preview && imageData.preview != '' ? imageData.preview : false,
            mediaName = imageData.name ? imageData.name : '';
        var imageTagData = mediaPreview ? {
          className: 'sidebar-image__preview',
          "data-id": mediaID,
          src: mediaPreview,
          alt: 'Image Preview'
        } : {};
        return el(PanelRow, {
          className: "wpsides-row--" + props.id
        }, el('div', {
          className: 'wpsides-sidebar-media',
          style: {
            textAlign: 'center',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            width: '100%'
          }
        }, el('label', {
          className: 'components-base-control__label wpsides-label',
          style: {
            alignSelf: 'flex-start',
            marginBottom: '1rem'
          }
        }, props.title), el(control, controlOptions), el('figure', {
          className: 'wpsides-sidebar-media__preview',
          style: !mediaPreview ? {
            display: 'none'
          } : {
            padding: '1rem',
            margin: '1rem 0'
          }
        }, el('img', imageTagData), el('figcaption', {
          className: 'wpsides-sidebar-media__name'
        }, mediaName)), el('button', {
          style: !mediaPreview ? {
            display: 'none'
          } : {},
          className: 'button button-large editor-button wpsides-sidebar-media__button wpsides-sidebar-media__button--remove',
          onClick: function onClick() {
            props.setMetaValue({});
          }
        }, 'Remove')));
      });
    }
  }
};
/* harmony default export */ var create = (createControls);
;// CONCATENATED MODULE: ../_src/main/controls/control-list.js

var control_list_wp$components = wp.components,
    CheckboxControl = control_list_wp$components.CheckboxControl,
    ColorPicker = control_list_wp$components.ColorPicker,
    DatePicker = control_list_wp$components.DatePicker,
    FontSizePicker = control_list_wp$components.FontSizePicker,
    RadioControl = control_list_wp$components.RadioControl,
    RangeControl = control_list_wp$components.RangeControl,
    SelectControl = control_list_wp$components.SelectControl,
    TextControl = control_list_wp$components.TextControl,
    TextareaControl = control_list_wp$components.TextareaControl,
    TimePicker = control_list_wp$components.TimePicker,
    ToggleControl = control_list_wp$components.ToggleControl;
var _wp$blockEditor = wp.blockEditor,
    MediaUpload = _wp$blockEditor.MediaUpload,
    URLInput = _wp$blockEditor.URLInput;
/**
 * Select a control, if it has own meta field
 * @param {string} type The type of control
 * @param {object} additional Additional options to use (optional)
 * @returns {object} Returns the control
 */

var __control = function __control(type, additional) {
  additional = typeof additional != 'undefined' && additional ? additional : {};
  var options = {
    colour: create.single.general(ColorPicker, 'colour', additional),
    checkbox: create.single.general(CheckboxControl, 'boolean', additional),
    date: create.single.general(DatePicker, 'date', additional),
    fontSize: create.single.general(FontSizePicker, 'fontSizes', additional),
    media: create.single.media(MediaUpload, 'media', additional),
    radio: create.single.general(RadioControl, 'radio', additional),
    range: create.single.general(RangeControl, 'string', additional),
    select: create.single.general(SelectControl, 'string', additional),
    text: create.single.general(TextControl, 'string', additional),
    textURL: create.single.general(URLInput, 'string', additional),
    textarea: create.single.general(TextareaControl, 'string', additional),
    time: create.single.general(TimePicker, 'time', additional),
    toggle: create.single.general(ToggleControl, 'boolean', additional)
  };
  return options[type];
};
/**
 * Select a control, if it shares a meta field with others
 * @param {string} type The type of control
 * @param {object} additional Additional options to use (optional)
 * @returns {object} Returns the control
 */


var __groupControl = function __groupControl(type, additional) {
  additional = typeof additional != 'undefined' && additional ? additional : {};
  var options = {
    colour: create.group.general(ColorPicker, 'colour', additional),
    checkbox: create.group.general(CheckboxControl, 'boolean', additional),
    date: create.group.general(DatePicker, 'date', additional),
    fontSize: create.group.general(FontSizePicker, 'fontSizes', additional),
    media: create.group.media(MediaUpload, 'media', additional),
    radio: create.group.general(RadioControl, 'radio', additional),
    range: create.group.general(RangeControl, 'string', additional),
    select: create.group.general(SelectControl, 'string', additional),
    text: create.group.general(TextControl, 'string', additional),
    textURL: create.group.general(URLInput, 'string', additional),
    textarea: create.group.general(TextareaControl, 'string', additional),
    time: create.group.general(TimePicker, 'time', additional),
    toggle: create.group.general(ToggleControl, 'boolean', additional)
  };
  return options[type];
};


;// CONCATENATED MODULE: ../_src/main/icons.js
var icons_el = wp.element.createElement;
/**
 * Render the icons as SVG elements
 * 
 * @param {array} layers The inner layers of the SVG
 * @param {*} svgOptions The primary options of the SVG
 * @returns 
 */

var renderIcon = function renderIcon(layers, svgOptions) {
  var svgDefaults = {
    width: 24,
    height: 24,
    fill: "none",
    viewBox: "0 0 15 15",
    xmlns: "http://www.w3.org/2000/svg",
    className: 'wp-sides-icon'
  };
  svgOptions = !svgOptions ? {} : svgOptions;
  var children = [],
      svg = Object.assign(svgDefaults, svgOptions);

  if (Array.isArray(layers)) {
    layers.forEach(function (opt) {
      children.push(icons_el('path', opt));
    });
    return icons_el('svg', svg, children);
  }
};

var __icons = {
  // Slider
  slider: renderIcon([{
    d: "m4.798 6.596h14.403v10.892h-14.403z"
  }, {
    d: "m22.406 6.59h4.153v10.892h-4.153z"
  }, {
    d: "m-1.783 6.59h3.934v10.892h-3.934z"
  }], {
    fill: "none",
    stroke: "currentColor",
    viewBox: "0 0 24 24",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "stroke-width": ".35"
  }),
  // Edit icon in a circle
  edit_circle: renderIcon([{
    d: "M4.5 8.5l-.354-.354L4 8.293V8.5h.5zm4-4l.354-.354a.5.5 0 00-.708 0L8.5 4.5zm2 2l.354.354a.5.5 0 000-.708L10.5 6.5zm-4 4v.5h.207l.147-.146L6.5 10.5zm-2 0H4a.5.5 0 00.5.5v-.5zm3 3.5A6.5 6.5 0 011 7.5H0A7.5 7.5 0 007.5 15v-1zM14 7.5A6.5 6.5 0 017.5 14v1A7.5 7.5 0 0015 7.5h-1zM7.5 1A6.5 6.5 0 0114 7.5h1A7.5 7.5 0 007.5 0v1zm0-1A7.5 7.5 0 000 7.5h1A6.5 6.5 0 017.5 1V0zM4.854 8.854l4-4-.708-.708-4 4 .708.708zm3.292-4l2 2 .708-.708-2-2-.708.708zm2 1.292l-4 4 .708.708 4-4-.708-.708zM6.5 10h-2v1h2v-1zm-1.5.5v-2H4v2h1z",
    fill: "currentColor"
  }]),
  // Information icon in a circle
  info_circle: renderIcon([{
    d: "M7 4.5V5h1v-.5H7zm1-.01v-.5H7v.5h1zM8 11V7H7v4h1zm0-6.5v-.01H7v.01h1zM6 8h1.5V7H6v1zm0 3h3v-1H6v1zM7.5 1A6.5 6.5 0 0114 7.5h1A7.5 7.5 0 007.5 0v1zM1 7.5A6.5 6.5 0 017.5 1V0A7.5 7.5 0 000 7.5h1zM7.5 14A6.5 6.5 0 011 7.5H0A7.5 7.5 0 007.5 15v-1zm0 1A7.5 7.5 0 0015 7.5h-1A6.5 6.5 0 017.5 14v1z",
    fill: "currentColor"
  }]),
  // Lightning bolt
  lightning: renderIcon([{
    d: "M14.36 2.067A1 1 0 0115 3v6h5a1 1 0 01.74 1.673l-10 11A1 1 0 019 21v-6H4a1 1 0 01-.74-1.673l10-11a1 1 0 011.1-.26zM6.26 13H10a1 1 0 011 1v4.413L17.74 11H14a1 1 0 01-1-1V5.587L6.26 13z"
  }], {
    fill: "currentColor",
    viewBox: "0 0 24 24"
  }),
  // Sliders
  sliders: renderIcon([{
    d: "M15 3.5H6.5m0 0a2 2 0 10-4 0m4 0a2 2 0 11-4 0m0 0H0m15 8h-2.5m0 0a2 2 0 10-4 0m4 0a2 2 0 11-4 0m0 0H0",
    stroke: "currentColor"
  }]),
  // Smiley face
  smile: renderIcon([{
    d: "M4.9 8.7l-.3-.4-.8.6.3.4.8-.6zm6 .6l.3-.4-.8-.6-.3.4.8.6zM7.5 14A6.5 6.5 0 011 7.5H0A7.5 7.5 0 007.5 15v-1zM14 7.5A6.5 6.5 0 017.5 14v1A7.5 7.5 0 0015 7.5h-1zM7.5 1A6.5 6.5 0 0114 7.5h1A7.5 7.5 0 007.5 0v1zm0-1A7.5 7.5 0 000 7.5h1A6.5 6.5 0 017.5 1V0zM4 6h1V5H4v1zm6 0h1V5h-1v1zm.1 2.7a3.25 3.25 0 01-5.2 0l-.8.6c1.7 2.267 5.1 2.267 6.8 0l-.8-.6z",
    fill: "currentColor"
  }]),
  // Star
  star: renderIcon([{
    d: "M7.5 12.04l-4.326 2.275L4 9.497.5 6.086l4.837-.703L7.5 1l2.163 4.383 4.837.703L11 9.497l.826 4.818L7.5 12.041z",
    stroke: "currentColor"
  }]),
  // Star in a circle
  star_circle: renderIcon([{
    d: "M7.5 9.804l.242-.437a.5.5 0 00-.484 0l.242.437zM5.337 11l-.494-.08a.5.5 0 00.736.518L5.337 11zm.413-2.533l.493.08a.5.5 0 00-.135-.429l-.358.35zM4 6.674l-.075-.495a.5.5 0 00-.283.844L4 6.673zm2.418-.37l.076.495a.5.5 0 00.377-.282l-.453-.213zM7.5 4l.453-.212a.5.5 0 00-.906 0L7.5 4zm1.082 2.304l-.453.213a.5.5 0 00.377.282l.076-.495zm2.418.37l.358.349a.5.5 0 00-.283-.844L11 6.674zM9.25 8.467l-.358-.349a.5.5 0 00-.135.43l.493-.08zM9.663 11l-.242.438a.5.5 0 00.736-.519L9.663 11zM7.258 9.367l-2.163 1.195.484.876 2.163-1.196-.484-.875zM5.83 11.08l.413-2.532-.986-.161-.414 2.532.987.162zm.278-2.962l-1.75-1.794-.716.699 1.75 1.793.716-.698zm-2.033-.95l2.419-.37-.151-.988-2.418.37.15.988zm2.796-.651l1.082-2.305-.906-.424-1.081 2.304.905.425zm.176-2.305L8.13 6.517l.905-.425-1.081-2.304-.906.424zM8.507 6.8l2.418.369.15-.989-2.418-.369-.15.989zm2.135-.475l-1.75 1.794.716.698 1.75-1.793-.716-.699zM8.757 8.548l.413 2.533.987-.162-.414-2.532-.986.16zm1.148 2.014L7.742 9.367l-.484.875 2.163 1.196.484-.876zM7.5 14A6.5 6.5 0 011 7.5H0A7.5 7.5 0 007.5 15v-1zM14 7.5A6.5 6.5 0 017.5 14v1A7.5 7.5 0 0015 7.5h-1zM7.5 1A6.5 6.5 0 0114 7.5h1A7.5 7.5 0 007.5 0v1zm0-1A7.5 7.5 0 000 7.5h1A6.5 6.5 0 017.5 1V0z",
    fill: "currentColor"
  }]),
  // Toggles
  toggles: renderIcon([{
    d: "M3.5 2.5a1 1 0 110 2 1 1 0 010-2z",
    stroke: "currentColor"
  }, {
    d: "M11.5.5h-8a3 3 0 000 6h8a3 3 0 100-6zm0 12a1 1 0 110-2 1 1 0 010 2z",
    stroke: "currentColor"
  }, {
    d: "M3.5 14.5h8a3 3 0 100-6h-8a3 3 0 000 6z",
    stroke: "currentColor"
  }])
};

;// CONCATENATED MODULE: ../_src/main/wpsides.js
/**
 * The main file to be compiled
 */



/**
 * The core object to export and used in order to create the sidebars
 */

var wpSides = {
  /**
   * A control that it's own meta field
   * @param {string} type The type of control
   * @param {object} additional Additional options to use (optional)
   * @returns 
   */
  control: function control(type, additional) {
    return __control(type, additional);
  },

  /**
   * A control that shares a meta field with other
   * @param {string} type The type of control
   * @param {object} additional Additional options to use (optional)
   * @returns 
   */
  groupControl: function groupControl(type, additional) {
    return __groupControl(type, additional);
  },

  /**
   * Icons for the sidebar
   */
  icons: __icons,

  /**
   * Utility methods that are used within the plugin code
   */
  utils: __utils,

  /**
   * Create the sidebars
   */
  Sidebar: wp.editPost.PluginSidebar,

  /**
   * Add the newly created sidebars to the pages
   */
  AddSidebar: wp.editPost.PluginSidebarMoreMenuItem,

  /**
   * Use to extend the 'Document Settings' panel
   */
  DocumentPanel: wp.editPost.PluginDocumentSettingPanel
};
export { wpSides };